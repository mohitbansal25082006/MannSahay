// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedId      String?   @unique
  language      String?   @default("en")
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts     Account[]
  sessions     Session[]
  chats        Chat[]
  chatSessions ChatSession[] // NEW: Chat sessions for organization
  bookings     Booking[]
  posts        Post[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// NEW: Chat Session model for organizing conversations
model ChatSession {
  id          String   @id @default(cuid())
  title       String?  // Auto-generated or user-defined title
  isActive    Boolean  @default(true) // Current active session
  isArchived  Boolean  @default(false)
  language    String   @default("en")
  riskLevel   RiskLevel @default(NONE) // Highest risk level in session
  totalMessages Int    @default(0)
  lastMessageAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats Chat[]
  
  @@index([userId, isActive])
  @@index([userId, lastMessageAt])
  @@map("chat_sessions")
}

// Enhanced Chat model with session relationship
model Chat {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   // 'user' or 'assistant'
  timestamp DateTime @default(now())
  userId    String
  sessionId String   // NEW: Links to ChatSession
  language  String?  @default("en")
  riskLevel RiskLevel @default(NONE)
  context   Json?    // NEW: Store context analysis (academic, social, etc.)
  audioUrl  String?  // NEW: For voice messages
  
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@map("chats")
}

model Counselor {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  specialties  String[]
  availability Json?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  
  bookings Booking[]
  @@map("counselors")
}

model Booking {
  id          String        @id @default(cuid())
  slotTime    DateTime
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  userId      String
  counselorId String
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  counselor Counselor @relation(fields: [counselorId], references: [id])
  @@map("bookings")
}

model Post {
  id          String    @id @default(cuid())
  title       String?
  content     String    @db.Text
  isAnonymous Boolean   @default(true)
  flagged     Boolean   @default(false)
  riskLevel   RiskLevel @default(NONE)
  createdAt   DateTime  @default(now())
  authorId    String
  
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies Reply[]
  @@map("posts")
}

model Reply {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  postId    String
  authorId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("replies")
}

model Resource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  content     String?     @db.Text
  type        ResourceType
  language    String      @default("en")
  fileUrl     String?
  tags        String[]
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  @@map("resources")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RiskLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum ResourceType {
  ARTICLE
  VIDEO
  AUDIO
  PDF
  EXERCISE
}