// E:\mannsahay\prisma\schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedId      String?   @unique
  language      String?   @default("en")
  isAdmin       Boolean   @default(false)
  preferredLanguage String? @default("en")
  interests     String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // New fields for counselor matching
  preferredSpecializations String[] @default([])
  preferredLanguages      String[] @default(["en"])
  
  accounts     Account[]
  sessions     Session[]
  chats        Chat[]
  chatSessions ChatSession[] 
  bookings     Booking[]
  posts        Post[]
  replies      Reply[]
  likes        Like[]
  bookmarks    Bookmark[]
  shares       Share[]
  flags        Flag[]
  notifications Notification[]
  sessionNotes  SessionNote[]
  feedbacks     Feedback[]
  waitlistEntries WaitlistEntry[]
  moodHistory   MoodEntry[]
  groupSessions GroupSessionParticipant[]
  counselorNotes CounselorNote[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ChatSession {
  id          String   @id @default(cuid())
  title       String?  
  isActive    Boolean  @default(true) 
  isArchived  Boolean  @default(false)
  language    String   @default("en")
  riskLevel   RiskLevel @default(NONE) 
  totalMessages Int    @default(0)
  lastMessageAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats Chat[]
  
  @@index([userId, isActive])
  @@index([userId, lastMessageAt])
  @@map("chat_sessions")
}

model Chat {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   
  timestamp DateTime @default(now())
  userId    String
  sessionId String   
  language  String?  @default("en")
  riskLevel RiskLevel @default(NONE)
  context   Json?    
  audioUrl  String?  
  
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@map("chats")
}

model Counselor {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  bio          String?   @db.Text
  specialties  String[]
  languages    String[]  @default(["en"])
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // New fields for counselor profile
  profileImage String?
  experience   Int?      // Years of experience
  education    String?   @db.Text
  approach     String?   @db.Text
  consultationFee Float?  // For future reference
  maxDailySessions Int?   @default(8)
  bufferTimeMinutes Int?  @default(15)
  
  bookings     Booking[]
  availability AvailabilitySlot[]
  groupSessions GroupSession[]
  counselorNotes CounselorNote[]
  waitlistEntries WaitlistEntry[]
  sessionNotes SessionNote[]
  @@map("counselors")
}

model AvailabilitySlot {
  id           String   @id @default(cuid())
  counselorId  String
  dayOfWeek    Int      // 0-6 (Sunday-Saturday)
  startTime    DateTime // Time part only
  endTime      DateTime // Time part only
  isBooked     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  counselor    Counselor @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  booking      Booking?
  
  @@unique([counselorId, dayOfWeek, startTime, endTime])
  @@map("availability_slots")
}

model Booking {
  id            String        @id @default(cuid())
  slotTime      DateTime
  endTime       DateTime
  status        BookingStatus @default(PENDING)
  notes         String?       @db.Text
  sessionType   SessionType   @default(ONE_ON_ONE)
  isRecurring   Boolean       @default(false)
  recurringPattern String?    // daily, weekly, biweekly, monthly
  recurringEndDate DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  counselorId   String
  availabilitySlotId String?  @unique
  
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  counselor      Counselor        @relation(fields: [counselorId], references: [id])
  availabilitySlot AvailabilitySlot? @relation(fields: [availabilitySlotId], references: [id])
  sessionNotes   SessionNote[]
  feedbacks      Feedback[]
  reminders      Reminder[]
  videoSession   VideoSession?
  moodEntries    MoodEntry[]
  @@map("bookings")
}

model GroupSession {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  maxParticipants Int    @default(10)
  sessionDate  DateTime
  duration     Int       // in minutes
  counselorId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  counselor    Counselor @relation(fields: [counselorId], references: [id])
  participants GroupSessionParticipant[]
  @@map("group_sessions")
}

model GroupSessionParticipant {
  id           String    @id @default(cuid())
  groupSessionId String
  userId       String
  joinedAt     DateTime  @default(now())
  
  groupSession GroupSession @relation(fields: [groupSessionId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupSessionId, userId])
  @@map("group_session_participants")
}

model WaitlistEntry {
  id           String    @id @default(cuid())
  userId       String
  counselorId  String
  preferredDay Int?      // 0-6 (Sunday-Saturday)
  preferredTime String?  // HH:MM format
  notes        String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contacted    Boolean   @default(false)
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  counselor    Counselor @relation(fields: [counselorId], references: [id])
  
  @@unique([userId, counselorId])
  @@map("waitlist_entries")
}

model SessionNote {
  id           String    @id @default(cuid())
  content      String    @db.Text
  isPrivate    Boolean   @default(true) // true for counselor eyes only, false for shared with user
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  counselorId  String
  bookingId    String
  
  user         User      @relation(fields: [userId], references: [id])
  counselor    Counselor @relation(fields: [counselorId], references: [id])
  booking      Booking   @relation(fields: [bookingId], references: [id])
  @@map("session_notes")
}

model CounselorNote {
  id           String    @id @default(cuid())
  content      String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  counselorId  String
  userId       String
  
  counselor    Counselor @relation(fields: [counselorId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  @@map("counselor_notes")
}

model MoodEntry {
  id           String    @id @default(cuid())
  mood         Int       // 1-10 scale
  notes        String?   @db.Text
  createdAt    DateTime  @default(now())
  userId       String
  bookingId    String?   // Optional: associated with a session
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking      Booking?  @relation(fields: [bookingId], references: [id])
  @@map("mood_entries")
}

model Feedback {
  id           String    @id @default(cuid())
  rating       Int       // 1-5 stars
  content      String?   @db.Text
  createdAt    DateTime  @default(now())
  userId       String
  bookingId    String
  
  user         User      @relation(fields: [userId], references: [id])
  booking      Booking   @relation(fields: [bookingId], references: [id])
  @@map("feedbacks")
}

model Reminder {
  id           String        @id @default(cuid())
  type         ReminderType
  message      String        @db.Text
  sendAt       DateTime
  sent         Boolean       @default(false)
  sentAt       DateTime?
  createdAt    DateTime      @default(now())
  bookingId    String
  
  booking      Booking       @relation(fields: [bookingId], references: [id])
  @@map("reminders")
}

model VideoSession {
  id           String    @id @default(cuid())
  platform     VideoPlatform
  meetingId    String?
  meetingUrl   String?
  hostUrl      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookingId    String    @unique
  
  booking      Booking   @relation(fields: [bookingId], references: [id])
  @@map("video_sessions")
}

model Post {
  id          String    @id @default(cuid())
  title       String?
  content     String    @db.Text
  isAnonymous Boolean   @default(true)
  flagged     Boolean   @default(false)
  riskLevel   RiskLevel @default(NONE)
  category    String?   @default("general")
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  moderationStatus ModerationStatus @default(PENDING)
  moderationReason String?
  moderationNote String?
  moderatedAt DateTime?
  moderatedBy String?
  summary String?
  summaryGeneratedAt DateTime?
  isHidden Boolean @default(false)
  language String @default("en")
  translatedContent Json?
  writingSuggestions Json?
  toneAnalysis Json?
  
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]   @relation("PostReplies")
  likes     Like[]
  bookmarks Bookmark[]
  shares    Share[]
  flags     Flag[]
  
  @@map("posts")
}

model Reply {
  id        String    @id @default(cuid())
  content   String    @db.Text
  flagged   Boolean   @default(false)
  riskLevel RiskLevel @default(NONE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postId    String
  authorId  String
  parentId  String?
  moderationStatus ModerationStatus @default(PENDING)
  moderationReason String?
  moderationNote String?
  moderatedAt DateTime?
  moderatedBy String?
  isHidden Boolean @default(false)
  language String @default("en")
  translatedContent Json?
  writingSuggestions Json?
  toneAnalysis Json?
  
  post   Post   @relation("PostReplies", fields: [postId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent Reply? @relation("ReplyReplies", fields: [parentId], references: [id])
  replies Reply[] @relation("ReplyReplies")
  likes  Like[]
  flags  Flag[]
  
  @@map("replies")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  replyId   String?
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply Reply? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("bookmarks")
}

model Share {
  id        String   @id @default(cuid())
  platform  String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("shares")
}

model Flag {
  id        String   @id @default(cuid())
  reason    String?
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  replyId   String?
  resolved  Boolean  @default(false)
  aiReviewStatus AiReviewStatus @default(PENDING)
  aiReviewResult String?
  aiReviewedAt DateTime?
  aiConfidence Float?
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply Reply? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@map("flags")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  metadata  Json?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("notifications")
}

model Resource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  content     String?     @db.Text
  type        ResourceType
  language    String      @default("en")
  fileUrl     String?
  tags        String[]
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  @@map("resources")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum SessionType {
  ONE_ON_ONE
  GROUP
}

enum RiskLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum ResourceType {
  ARTICLE
  VIDEO
  AUDIO
  PDF
  EXERCISE
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AiReviewStatus {
  PENDING
  REVIEWING
  COMPLETED
  ERROR
}

enum ReminderType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
}

enum VideoPlatform {
  ZOOM
  GOOGLE_MEET
  MICROSOFT_TEAMS
}