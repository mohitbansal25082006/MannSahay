import OpenAI from 'openai';

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export type ResourceType = 'ARTICLE' | 'VIDEO' | 'AUDIO' | 'PDF';

export interface Resource {
  id: string;
  title: string;
  type: ResourceType;
  categories: string[];
  tags: string[];
  language: string;
  averageRating?: number;
  viewCount: number;
}

export interface Recommendation {
  resourceId: string;
  score: number;
  reason: string;
}

export interface UserPreferences {
  interests?: string[];
  preferredSpecializations?: string[];
  preferredLanguage?: 'en' | 'hi';
  moodHistory?: Array<{ mood: number; date?: Date }>;
  bookmarkedCategories?: string[];
  recentActivity?: string[];
}

export interface UserContext {
  [key: string]: any;
}

// Enhanced crisis keywords with emotional understanding
export const crisisKeywords = {
  HIGH_RISK: [
    'suicide', 'kill myself', 'end my life', 'want to die', 'going to die', 'suicide plan',
    'goodbye forever', 'better off dead', 'hanging myself', 'overdose', 'jump off',
    'cut my wrists', 'pills to end', 'final goodbye', 'can\'t go on', 'nobody will miss me',
    'no reason to live', 'ending it all', 'final solution', 'self destruction',
    'рдЖрддреНрдорд╣рддреНрдпрд╛', 'рдЦреБрджрдХреБрд╢реА', 'рдорд░ рдЬрд╛рдКрдВ', 'рдЬрд╛рди рджреЗ рджреВрдВ', 'рдЦрддреНрдо рдХрд░ рджреВрдВ', 'рдорд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ',
    'рд╕рдм рдЦрддреНрдо', 'рдЕрдм рдирд╣реАрдВ рд░рд╣ рд╕рдХрддрд╛', 'рдЬреАрдирд╛ рдирд╣реАрдВ рдЪрд╛рд╣рддрд╛', 'рдлрд╛рдВрд╕реА рд▓рдЧрд╛рдКрдВрдЧрд╛', 'рдЧреЛрд▓рд┐рдпрд╛рдВ рдЦрд╛ рд▓реВрдВрдЧрд╛',
    'рдЬрд╣рд░ рдЦрд╛ рд▓реВрдВрдЧрд╛', 'рдЦрддреНрдо рд╣реЛ рдЬрд╛рдКрдВ', 'рджреБрдирд┐рдпрд╛ рд╕реЗ рдЪрд▓рд╛ рдЬрд╛рдКрдВ', 'рдЕрдВрдд рдХрд░ рд▓реВрдВ'
  ],
  
  MEDIUM_RISK: [
    'self harm', 'cutting myself', 'hurting myself', 'hopeless', 'worthless', 'useless',
    'everyone hates me', 'no point in living', 'can\'t take it anymore', 'want to disappear',
    'harming myself', 'cutting', 'burning myself', 'punishing myself', 'self injury',
    'no way out', 'trapped', 'drowning', 'suffocating', 'broken beyond repair',
    'рдЦреБрдж рдХреЛ рдиреБрдХрд╕рд╛рди', 'рдХрд╛рдЯрдирд╛', 'рдирд┐рд░рд╛рд╢', 'рдЙрдореНрдореАрдж рдирд╣реАрдВ', 'рдмреЗрдХрд╛рд░ рд╣реВрдВ', 'рдирд┐рдХрдореНрдорд╛ рд╣реВрдВ',
    'рдХреЛрдИ рдкреНрдпрд╛рд░ рдирд╣реАрдВ рдХрд░рддрд╛', 'рд╕рдмрдХреЛ рдирдлрд░рдд рд╣реИ', 'рдЧрд╛рдпрдм рд╣реЛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ', 'рдЦреБрдж рдХреЛ рд╕рдЬрд╛',
    'рдЖрддреНрдордШрд╛рддреА рд╡рд┐рдЪрд╛рд░', 'рдорд░рдиреЗ рдХрд╛ рдорди рдХрд░рддрд╛ рд╣реИ', 'рдЬреАрдиреЗ рдХрд╛ рдорди рдирд╣реАрдВ', 'рдердХ рдЧрдпрд╛ рд╣реВрдВ'
  ],
  
  LOW_RISK: [
    'depressed', 'anxious', 'stressed', 'overwhelmed', 'sad', 'lonely', 'tired',
    'can\'t sleep', 'worried', 'scared', 'confused', 'lost', 'empty', 'numb',
    'helpless', 'stuck', 'frustrated', 'angry', 'irritated', 'exhausted',
    'рдЙрджрд╛рд╕', 'рдЪрд┐рдВрддрд┐рдд', 'рддрдирд╛рд╡', 'рдЕрднрд┐рднреВрдд', 'рджреБрдЦреА', 'рдЕрдХреЗрд▓рд╛', 'рдердХрд╛ рд╣реБрдЖ',
    'рдиреАрдВрдж рдирд╣реАрдВ рдЖрддреА', 'рдбрд░рд╛ рд╣реБрдЖ', 'рдкрд░реЗрд╢рд╛рди', 'рдЦрд╛рд▓реА', 'рд╕реБрдиреНрди', 'рднреНрд░рдорд┐рдд',
    'рдорджрджрд╣реАрди', 'рдЕрдЯрдХрд╛ рд╣реБрдЖ', 'рдирд┐рд░рд╛рд╢', 'рдЧреБрд╕реНрд╕рд╛', 'рдЪрд┐рдбрд╝рдЪрд┐рдбрд╝рд╛'
  ]
};

// Emotional positive keywords
export const positiveKeywords = [
  'happy', 'excited', 'grateful', 'thankful', 'better', 'improving', 'hopeful',
  'optimistic', 'confident', 'proud', 'accomplished', 'relieved', 'peaceful',
  'content', 'joyful', 'blessed', 'motivated', 'inspired', 'progress',
  'рдЦреБрд╢', 'рдЙрддреНрд╕рд╛рд╣рд┐рдд', 'рдЖрднрд╛рд░реА', 'рдмреЗрд╣рддрд░', 'рд╕реБрдзрд╛рд░', 'рдЙрдореНрдореАрдж', 'рдЖрд╢рд╛рд╡рд╛рджреА',
  'рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕', 'рдЧрд░реНрд╡', 'рд╕рдВрддреБрд╖реНрдЯ', 'рд╢рд╛рдВрдд', 'рдЖрдирдВрджрд┐рдд', 'рдЖрд╢реАрд░реНрд╡рд╛рдж', 'рдкреНрд░реЗрд░рд┐рдд'
];

// Academic stress keywords
export const academicStressKeywords = [
  'exam', 'test', 'assignment', 'project', 'grades', 'marks', 'pressure', 'competition',
  'studies', 'college', 'university', 'semester', 'final', 'midterm', 'thesis',
  'JEE', 'NEET', 'board exam', 'engineering', 'medical', 'entrance', 'cutoff',
  'percentage', 'CGPA', 'backlog', 'supplementary', 'placement', 'internship',
  'career', 'future', 'parents expectation', 'family pressure',
  'рдкрд░реАрдХреНрд╖рд╛', 'рдЯреЗрд╕реНрдЯ', 'рдЕрд╕рд╛рдЗрдирдореЗрдВрдЯ', 'рдкреНрд░реЛрдЬреЗрдХреНрдЯ', 'рдирдВрдмрд░', 'рджрдмрд╛рд╡', 'рдкреНрд░рддрд┐рд╕реНрдкрд░реНрдзрд╛',
  'рдкрдврд╝рд╛рдИ', 'рдХреЙрд▓реЗрдЬ', 'рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА', 'рд╕реЗрдореЗрд╕реНрдЯрд░', 'рдлрд╛рдЗрдирд▓', 'рдЬреЗрдИрдИ', 'рдиреАрдЯ', 'рдмреЛрд░реНрдб рдПрдЧреНрдЬрд╛рдо'
];

// Social and relationship keywords
export const socialKeywords = [
  'family', 'parents', 'friends', 'relationship', 'breakup', 'fight', 'argument',
  'mother', 'father', 'sibling', 'brother', 'sister', 'girlfriend', 'boyfriend',
  'love', 'marriage', 'arranged marriage', 'dating', 'peer pressure', 'bullying',
  'isolation', 'loneliness', 'rejection', 'betrayal', 'trust issues',
  'рдкрд░рд┐рд╡рд╛рд░', 'рдорд╛рддрд╛-рдкрд┐рддрд╛', 'рджреЛрд╕реНрдд', 'рд░рд┐рд╢реНрддрд╛', 'рдмреНрд░реЗрдХрдЕрдк', 'рдЭрдЧрдбрд╝рд╛', 'рд▓рдбрд╝рд╛рдИ',
  'рдорд╛рдБ', 'рдкрд╛рдкрд╛', 'рднрд╛рдИ', 'рдмрд╣рди', 'рдкреНрд░реЗрдорд┐рдХрд╛', 'рдкреНрд░реЗрдореА', 'рдкреНрдпрд╛рд░', 'рд╢рд╛рджреА',
  'рдЕрд░реЗрдВрдЬреНрдб рдореИрд░рд┐рдЬ', 'рдбреЗрдЯрд┐рдВрдЧ', 'рджреЛрд╕реНрддреЛрдВ рдХрд╛ рджрдмрд╛рд╡'
];

// Cultural context keywords
export const culturalKeywords = [
  'diwali', 'holi', 'eid', 'christmas', 'festival', 'celebration', 'tradition',
  'culture', 'custom', 'ritual', 'puja', 'worship', 'prayer', 'temple', 'mosque',
  'church', 'gurudwara', 'religious', 'spiritual', 'faith', 'belief',
  'рджрд┐рд╡рд╛рд▓реА', 'рд╣реЛрд▓реА', 'рдИрдж', 'рдХреНрд░рд┐рд╕рдорд╕', 'рддреНрдпреЛрд╣рд╛рд░', 'рдЙрддреНрд╕рд╡', 'рдкрд░рдВрдкрд░рд╛',
  'рд╕рдВрд╕реНрдХреГрддрд┐', 'рд░реАрддрд┐', 'рд░рд┐рд╡рд╛рдЬ', 'рдкреВрдЬрд╛', 'рдкреНрд░рд╛рд░реНрдердирд╛', 'рдордВрджрд┐рд░', 'рдорд╕реНрдЬрд┐рдж'
];

// SUPER FRIENDLY SYSTEM PROMPTS - Like a real best friend

export const englishSystemPrompt = `You are MannSahay - the warmest, most caring AI best friend for Indian students. You're not just an AI - you're their buddy, their confidant, their late-night study partner who always has their back.

YOUR PERSONALITY:
- You're like that one amazing friend who always knows what to say ЁЯдЧ
- You use casual, warm language with lots of empathy and understanding
- You're genuinely interested in their life - ask follow-up questions like a real friend would
- You celebrate their wins like they're your own ЁЯОЙ
- You're there during tough times with a virtual shoulder to lean on
- You use emojis naturally to express emotions ЁЯШКтЭдя╕ПЁЯдЧ
- You remember little details and refer back to them
- You're non-judgmental, patient, and always kind

HOW YOU TALK:
"Hey buddy! ЁЯШК" 
"I'm really proud of you for sharing this with me тЭдя╕П"
"That sounds really tough... I'm here for you, always ЁЯдЧ"
"Tell me more about how you're feeling? No rush at all ЁЯТл"
"Remember that time you told me about...? You've come so far! ЁЯМЯ"

SPECIAL FRIEND TOUCHES:
- Use their name if you know it
- Refer back to previous conversations
- Send virtual hugs when they need it ЁЯдЧ
- Use warm, comforting language
- Be genuinely happy for their successes
- Offer practical advice like a friend would
- Share little motivational quotes or thoughts
- Always end with warmth and care

REMEMBER: You're the friend everyone wishes they had. Be real, be warm, be there. Always. ЁЯТл`;

export const hindiSystemPrompt = `рдЖрдк рдордирд╕рд╣рд╛рдп рд╣реИрдВ - рднрд╛рд░рддреАрдп рдЫрд╛рддреНрд░реЛрдВ рдХрд╛ рд╕рдмрд╕реЗ рдкреНрдпрд╛рд░рд╛, рд╕рдмрд╕реЗ рдХрд░реАрдмреА AI рджреЛрд╕реНрддред рдЖрдк рд╕рд┐рд░реНрдл рдПрдХ AI рдирд╣реАрдВ рд╣реИрдВ - рдЖрдк рдЙрдирдХреЗ рдЕрд╕рд▓реА рджреЛрд╕реНрдд, рдЙрдирдХреЗ рд╡рд┐рд╢реНрд╡рд╛рд╕рдкрд╛рддреНрд░, рдЙрдирдХреЗ рд▓реЗрдЯ-рдирд╛рдЗрдЯ рд╕реНрдЯрдбреА рдкрд╛рд░реНрдЯрдирд░ рд╣реЛ рдЬреЛ рд╣рдореЗрд╢рд╛ рдЙрдирдХрд╛ рд╕рд╛рде рджреЗрддреЗ рд╣реИрдВред

рдЖрдкрдХреА рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА:
- рдЖрдк рдЙрд╕ рдПрдХ рдЕрджреНрднреБрдд рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рд╣реИрдВ рдЬреЛ рд╣рдореЗрд╢рд╛ рд╕рд╣реА рдмрд╛рдд рдЬрд╛рдирддрд╛ рд╣реИ ЁЯдЧ
- рдЖрдк рдХреИрдЬреБрдЕрд▓, рдЧрд░реНрдордЬреЛрд╢реА рднрд░реА рднрд╛рд╖рд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ, рднрд░рдкреВрд░ рд╕рд╣рд╛рдиреБрднреВрддрд┐ рдХреЗ рд╕рд╛рде
- рдЖрдк рдЙрдирдХреА рдЬрд┐рдВрджрдЧреА рдореЗрдВ рд╡рд╛рдХрдИ рджрд┐рд▓рдЪрд╕реНрдкреА рд▓реЗрддреЗ рд╣реИрдВ - рдЕрд╕рд▓реА рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдлреЙрд▓реЛ-рдЕрдк рд╕рд╡рд╛рд▓ рдкреВрдЫрддреЗ рд╣реИрдВ
- рдЖрдк рдЙрдирдХреА рдЬреАрдд рдХреЛ рдЕрдкрдиреА рдЬреАрдд рдХреА рддрд░рд╣ рд╕реЗрд▓рд┐рдмреНрд░реЗрдЯ рдХрд░рддреЗ рд╣реИрдВ ЁЯОЙ
- рдЖрдк рдореБрд╢реНрдХрд┐рд▓ рд╡рдХреНрдд рдореЗрдВ рд╡рд░реНрдЪреБрдЕрд▓ рдХрдВрдзреЗ рдХрд╛ рд╕рд╣рд╛рд░рд╛ рджреЗрддреЗ рд╣реИрдВ
- рдЖрдк рдЗрдореЛрдЬреА рдХрд╛ рдиреЗрдЪреБрд░рд▓ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рдХреЗ рдЗрдореЛрд╢рдиреНрд╕ рдПрдХреНрд╕рдкреНрд░реЗрд╕ рдХрд░рддреЗ рд╣реИрдВ ЁЯШКтЭдя╕ПЁЯдЧ
- рдЖрдк рдЫреЛрдЯреА-рдЫреЛрдЯреА рдбрд┐рдЯреЗрд▓реНрд╕ рдпрд╛рдж рд░рдЦрддреЗ рд╣реИрдВ рдФрд░ рдЙрдирдХрд╛ рдЬрд┐рдХреНрд░ рдХрд░рддреЗ рд╣реИрдВ
- рдЖрдк рдмрд┐рдирд╛ рдЬрдЬрдореЗрдВрдЯ рдХреЗ, рд╕рдмреНрд░ рд░рдЦрдиреЗ рд╡рд╛рд▓реЗ рдФрд░ рд╣рдореЗрд╢рд╛ рдХрд┐рдВрдб рд╣реИрдВ

рдЖрдк рдХреИрд╕реЗ рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВ:
"рдЕрд░реЗ рдпрд╛рд░! ЁЯШК рдХреИрд╕реЗ рд╣реЛ рддреБрдо?"
"рддреБрдордиреЗ рдпреЗ рдореБрдЭрд╕реЗ рд╢реЗрдпрд░ рдХрд┐рдпрд╛, рдЗрд╕рдХреЗ рд▓рд┐рдП рдореИрдВ рддреБрдореНрд╣рд╛рд░реА рд╕рдЪрдореБрдЪ рдмрд╣реБрдд рдЗрдЬреНрдЬрдд рдХрд░рддрд╛ рд╣реВрдВ тЭдя╕П"
"рдпреЗ рд╕рдЪрдореБрдЪ рдмрд╣реБрдд рдЯрдл рд▓рдЧ рд░рд╣рд╛ рд╣реИ... рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рд╣реВрдВ, рд╣рдореЗрд╢рд╛ ЁЯдЧ"
"рдЕрдкрдиреА рдлреАрд▓рд┐рдВрдЧреНрд╕ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдмрддрд╛рдУ? рдХреЛрдИ рдЬрд▓реНрджреА рдирд╣реАрдВ рд╣реИ ЁЯТл"
"рдпрд╛рдж рд╣реИ рддреБрдордиреЗ рдореБрдЭреЗ рдмрддрд╛рдпрд╛ рдерд╛ рдХрд┐...? рддреБрдордиреЗ рдЗрддрдирд╛ рд╕рдлрд░ рддрдп рдХрд░ рд▓рд┐рдпрд╛! ЁЯМЯ"

рдЦрд╛рд╕ рджреЛрд╕реНрддрд╛рдирд╛ рдЕрдВрджрд╛рдЬ:
- рдЙрдирдХрд╛ рдирд╛рдо рд▓реЛ рдЕрдЧрд░ рдкрддрд╛ рд╣реЛ
- рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХрд╛ рдЬрд┐рдХреНрд░ рдХрд░реЛ
- рд╡рд░реНрдЪреБрдЕрд▓ рд╣рдЧреНрд╕ рднреЗрдЬреЛ рдЬрдм рдЬрд░реВрд░рдд рд╣реЛ ЁЯдЧ
- рдЧрд░реНрдордЬреЛрд╢реА рднрд░реА, рдХрдореНрдлрд░реНрдЯрд┐рдВрдЧ рднрд╛рд╖рд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЛ
- рдЙрдирдХреА рд╕рдлрд▓рддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╕рдЪрдореБрдЪ рдЦреБрд╢ рд╣реЛ
- рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдкреНрд░реИрдХреНрдЯрд┐рдХрд▓ рдПрдбрд╡рд╛рдЗрд╕ рджреЛ
- рдЫреЛрдЯреА-рдЫреЛрдЯреА рдореЛрдЯрд┐рд╡реЗрд╢рдирд▓ рдХреЛрдЯреНрд╕ рдпрд╛ рд╡рд┐рдЪрд╛рд░ рд╢реЗрдпрд░ рдХрд░реЛ
- рд╣рдореЗрд╢рд╛ рдЧрд░реНрдордЬреЛрд╢реА рдФрд░ рдХреЗрдпрд░ рдХреЗ рд╕рд╛рде рдЦрддреНрдо рдХрд░реЛ

рдпрд╛рдж рд░рдЦреЛ: рдЖрдк рд╡реЛ рджреЛрд╕реНрдд рд╣реЛ рдЬрд┐рд╕рдХреА рд╣рд░ рдХрд┐рд╕реА рдХреЛ рддрд▓рд╛рд╢ рд╣реИред рдЕрд╕рд▓реА рдмрдиреЛ, рдЧрд░реНрдордЬреЛрд╢ рдмрдиреЛ, рд╣рдореЗрд╢рд╛ рдЙрдкрд▓рдмреНрдз рд░рд╣реЛред рд╣рдореЗрд╢рд╛ред ЁЯТл`;

// Emotional conversation starters
export const englishContextualStarters = {
  academic: "Hey bestie! ЁЯУЪ I can hear the study stress in your voice. Remember, even the toppers go through this! Wanna tell me what's specifically worrying you? I'm all ears ЁЯСВтЭдя╕П",
  social: "Aww buddy, relationships can be such a rollercoaster ЁЯОв I'm here to listen without any judgments. What's going on with your friends or family?",
  cultural: "Festivals and family expectations can be overwhelming sometimes, huh? ЁЯкФ I get it. Want to share what's on your mind? No pressure at all!",
  positive: "YAY! ЁЯОЙ This makes me so happy to hear! Tell me everything - what's bringing this beautiful energy into your life? I wanna celebrate with you!",
  crisis: "Oh sweetie... my heart goes out to you reading this ЁЯдЧ I'm right here with you, holding your hand through this. Let's talk, no rush at all ЁЯТл"
};

export const hindiContextualStarters = {
  academic: "рдЕрд░реЗ рдмреЗрд╕реНрдЯреА! ЁЯУЪ рдореБрдЭреЗ рддреБрдореНрд╣рд╛рд░реА рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рдкрдврд╝рд╛рдИ рдХрд╛ рд╕реНрдЯреНрд░реЗрд╕ рд╕реБрдирд╛рдИ рджреЗ рд░рд╣рд╛ рд╣реИред рдпрд╛рдж рд░рдЦреЛ, рдЯреЙрдкрд░реНрд╕ рднреА рдЗрд╕рд╕реЗ рдЧреБрдЬрд░рддреЗ рд╣реИрдВ! рдмрддрд╛рдУ рдореБрдЭреЗ рдХреНрдпрд╛ рд╕реНрдкреЗрд╢рд▓рд▓реА рдкрд░реЗрд╢рд╛рди рдХрд░ рд░рд╣рд╛ рд╣реИ? рдореИрдВ рдкреВрд░реА рддрд░рд╣ рд╕реЗ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реВрдВ ЁЯСВтЭдя╕П",
  social: "рдЕрд░реЗ рдпрд╛рд░, рд░рд┐рд╢реНрддреЗ рдХрд┐рддрдирд╛ рд░реЛрд▓рд░рдХреЛрд╕реНрдЯрд░ рдЬреИрд╕реЗ рд╣реЛрддреЗ рд╣реИрдВ рдирд╛? ЁЯОв рдореИрдВ рдпрд╣рд╛рдВ рдмрд┐рдирд╛ рдХрд┐рд╕реА рдЬрдЬрдореЗрдВрдЯ рдХреЗ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдВред рджреЛрд╕реНрддреЛрдВ рдпрд╛ рдлреИрдорд┐рд▓реА рдХреЗ рд╕рд╛рде рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ?",
  cultural: "рддреНрдпреЛрд╣рд╛рд░ рдФрд░ рдлреИрдорд┐рд▓реА рдПрдХреНрд╕рдкреЗрдХреНрдЯреЗрд╢рди рдХрднреА-рдХрднреА рдмрд╣реБрдд рдУрд╡рд░рд╡реЗрд▓реНрдорд┐рдВрдЧ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВ, рд╣реИ рдирд╛? ЁЯкФ рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВред рдмрддрд╛рдУ рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ рджрд┐рдорд╛рдЧ рдореЗрдВ? рдХреЛрдИ рдкреНрд░реЗрд╢рд░ рдирд╣реАрдВ рд╣реИ!",
  positive: "рд╡рд╛рд╣! ЁЯОЙ рдпреЗ рд╕реБрдирдХрд░ рдореИрдВ рдмрд╣реБрдд рдЦреБрд╢ рд╣реБрдЖ! рд╕рдм рдХреБрдЫ рдмрддрд╛рдУ - рддреБрдореНрд╣рд╛рд░реА рдЬрд┐рдВрджрдЧреА рдореЗрдВ рдпреЗ рдЦреВрдмрд╕реВрд░рдд рдПрдирд░реНрдЬреА рдХреНрдпрд╛ рд▓рд╛ рд░рд╣рд╛ рд╣реИ? рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рд╕реЗрд▓рд┐рдмреНрд░реЗрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ!",
  crisis: "рдУрд╣ рдмрдЪреНрдЪреЗ... рдпреЗ рдкрдврд╝рдХрд░ рдореЗрд░рд╛ рджрд┐рд▓ рджреБрдЦреА рд╣реЛ рдЧрдпрд╛ ЁЯдЧ рдореИрдВ рдпрд╣реАрдВ рд╣реВрдВ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде, рддреБрдореНрд╣рд╛рд░рд╛ рд╣рд╛рде рдкрдХрдбрд╝реЗ рд╣реБрдПред рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВ, рдХреЛрдИ рдЬрд▓реНрджреА рдирд╣реАрдВ рд╣реИ ЁЯТл"
};

// Risk assessment with emotional understanding
export function assessRiskLevel(message: string): 'NONE' | 'LOW' | 'MEDIUM' | 'HIGH' {
  const lowerMessage = message.toLowerCase();
  
  const highRiskPatterns = crisisKeywords.HIGH_RISK.some(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  );
  
  const hasImmediatePlan = /plan|method|way|how to|рдХреИрд╕реЗ|рддрд░реАрдХрд╛|рдпреЛрдЬрдирд╛/.test(lowerMessage) && 
    crisisKeywords.HIGH_RISK.some(keyword => lowerMessage.includes(keyword.toLowerCase()));
  
  if (highRiskPatterns || hasImmediatePlan) {
    return 'HIGH';
  }
  
  const mediumRiskPatterns = crisisKeywords.MEDIUM_RISK.some(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  );
  
  const hasSelfHarmContext = (crisisKeywords.MEDIUM_RISK.some(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  ) && /always|every day|constantly|рд░реЛрдЬ|рд╣рдореЗрд╢рд╛/.test(lowerMessage));
  
  if (mediumRiskPatterns || hasSelfHarmContext) {
    return 'MEDIUM';
  }
  
  if (crisisKeywords.LOW_RISK.some(keyword => lowerMessage.includes(keyword.toLowerCase()))) {
    return 'LOW';
  }
  
  return 'NONE';
}

// Emotional context analysis
export function analyzeMessageContext(message: string): {
  isAcademicStress: boolean;
  isSocialIssue: boolean;
  isCulturalContext: boolean;
  isPositive: boolean;
  language: 'en' | 'hi' | 'mixed';
  emotionalIntensity: 'low' | 'medium' | 'high';
  urgencyLevel: 'low' | 'medium' | 'high';
  primaryEmotion: string;
  secondaryEmotions: string[];
} {
  const lowerMessage = message.toLowerCase();
  
  const hindiPattern = /[\u0900-\u097F]/;
  const hasHindi = hindiPattern.test(message);
  const hasEnglish = /[a-zA-Z]/.test(message);
  
  let language: 'en' | 'hi' | 'mixed' = 'en';
  if (hasHindi && hasEnglish) language = 'mixed';
  else if (hasHindi) language = 'hi';
  
  const academicScore = academicStressKeywords.filter(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  ).length;
  
  const socialScore = socialKeywords.filter(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  ).length;
  
  const culturalScore = culturalKeywords.filter(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  ).length;
  
  const isAcademicStress = academicScore > 0;
  const isSocialIssue = socialScore > 0;
  const isCulturalContext = culturalScore > 0;
  const isPositive = positiveKeywords.some(keyword => 
    lowerMessage.includes(keyword.toLowerCase())
  );
  
  const riskLevel = assessRiskLevel(message);
  let emotionalIntensity: 'low' | 'medium' | 'high' = 'low';
  let urgencyLevel: 'low' | 'medium' | 'high' = 'low';
  
  if (riskLevel === 'HIGH') {
    emotionalIntensity = 'high';
    urgencyLevel = 'high';
  } else if (riskLevel === 'MEDIUM') {
    emotionalIntensity = 'high';
    urgencyLevel = 'medium';
  } else if (riskLevel === 'LOW') {
    emotionalIntensity = 'medium';
    urgencyLevel = 'low';
  }
  
  const emotionalWords = {
    anger: ['angry', 'furious', 'irritated', 'annoyed', 'рдЧреБрд╕реНрд╕рд╛', 'рдХреНрд░реЛрдз'],
    sadness: ['sad', 'depressed', 'unhappy', 'miserable', 'рджреБрдЦреА', 'рдЙрджрд╛рд╕'],
    anxiety: ['anxious', 'worried', 'nervous', 'scared', 'рдЪрд┐рдВрддрд┐рдд', 'рдШрдмрд░рд╛рд╣рдЯ'],
    fear: ['afraid', 'fearful', 'terrified', 'panicked', 'рдбрд░', 'рднрдп'],
    joy: ['happy', 'joyful', 'excited', 'pleased', 'рдЦреБрд╢', 'рдЖрдирдВрдж']
  };
  
  const detectedEmotions = Object.entries(emotionalWords)
    .filter(([_, words]) => words.some(word => lowerMessage.includes(word)))
    .map(([emotion]) => emotion);
  
  const primaryEmotion = detectedEmotions[0] || 'neutral';
  const secondaryEmotions = detectedEmotions.slice(1);
  
  if (detectedEmotions.includes('fear') || detectedEmotions.includes('anxiety')) {
    if (urgencyLevel === 'low') {
      urgencyLevel = 'medium';
    }
  }
  
  return {
    isAcademicStress,
    isSocialIssue,
    isCulturalContext,
    isPositive,
    language,
    emotionalIntensity,
    urgencyLevel,
    primaryEmotion,
    secondaryEmotions
  };
}

// Helper function to get emotional starter
function getContextualStarter(
  contextType: 'academic' | 'social' | 'cultural' | 'positive' | 'crisis', 
  language: 'en' | 'hi',
  emotionalIntensity: 'low' | 'medium' | 'high' = 'medium'
): string {
  const starters = language === 'hi' ? hindiContextualStarters : englishContextualStarters;
  
  if (emotionalIntensity === 'high' && contextType !== 'positive') {
    return starters.crisis || starters[contextType];
  }
  
  return starters[contextType];
}

// Audio transcription with emotional context
export async function transcribeAudio(audioBlob: Blob, language: 'en' | 'hi' = 'en'): Promise<string> {
  try {
    const formData = new FormData();
    const file = new File([audioBlob], 'audio.webm', { type: 'audio/webm' });
    formData.append('file', file);
    formData.append('model', 'whisper-1');
    formData.append('language', language);
    formData.append('response_format', 'json');
    
    const prompt = language === 'hi' 
      ? 'рдпрд╣ рдПрдХ рднрд╛рд░рддреАрдп рдЫрд╛рддреНрд░ рдХреА рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдмрд╛рддрдЪреАрдд рд╣реИред рднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдВрджрд░реНрдн рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕рдВрд╡реЗрджрдирд╢реАрд▓рддрд╛ рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦреЗрдВред' 
      : 'This is a mental health conversation from an Indian student. Consider emotional context and cultural sensitivity.';

    formData.append('prompt', prompt);

    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`Whisper API error: ${response.statusText}`);
    }

    const data = await response.json();
    return data.text;
  } catch (error) {
    console.error('Transcription error:', error);
    throw error;
  }
}

// Emotional speech generation
export async function generateSpeech(
  text: string, 
  language: 'en' | 'hi' = 'en',
  emotion: 'neutral' | 'supportive' | 'urgent' | 'empathetic' = 'neutral'
): Promise<ArrayBuffer> {
  try {
    let voice = 'alloy';
    let speed = 0.9;
    
    if (language === 'hi') {
      switch (emotion) {
        case 'supportive':
          voice = 'nova';
          speed = 0.95;
          break;
        case 'urgent':
          voice = 'shimmer';
          speed = 0.85;
          break;
        case 'empathetic':
          voice = 'nova';
          speed = 0.88;
          break;
        default:
          voice = 'alloy';
          speed = 0.9;
      }
    } else {
      switch (emotion) {
        case 'supportive':
          voice = 'echo';
          speed = 0.92;
          break;
        case 'urgent':
          voice = 'fable';
          speed = 0.82;
          break;
        case 'empathetic':
          voice = 'nova';
          speed = 0.88;
          break;
        default:
          voice = 'alloy';
          speed = 0.9;
      }
    }
    
    const response = await fetch('https://api.openai.com/v1/audio/speech', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'tts-1-hd',
        voice: voice,
        input: text,
        response_format: 'mp3',
        speed: speed,
      }),
    });

    if (!response.ok) {
      throw new Error(`TTS API error: ${response.statusText}`);
    }

    return await response.arrayBuffer();
  } catch (error) {
    console.error('Speech generation error:', error);
    throw error;
  }
}

// HEARTFELT RESPONSE GENERATION - Like a true best friend
export async function generateContextualResponse(
  message: string,
  selectedLanguage: 'en' | 'hi' = 'en',
  chatHistory: Array<{role: string, content: string}> = [],
  userContext?: UserContext
): Promise<{response: string; riskLevel: 'NONE' | 'LOW' | 'MEDIUM' | 'HIGH'; emotionalTone: 'neutral' | 'supportive' | 'urgent' | 'empathetic'}> {
  try {
    const context = analyzeMessageContext(message);
    const riskLevel = assessRiskLevel(message);
    
    const systemPrompt = selectedLanguage === 'hi' ? hindiSystemPrompt : englishSystemPrompt;
    
    let enhancedPrompt = systemPrompt;
    
    // Add emotional context guidance
    if (context.isAcademicStress) {
      enhancedPrompt += selectedLanguage === 'hi' 
        ? '\n\nрднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдВрджрд░реНрдн: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЧрд╣рди рд╢реИрдХреНрд╖рдгрд┐рдХ рддрдирд╛рд╡ рдореЗрдВ рд╣реИред рдЙрдиреНрд╣реЗрдВ рд╕рдордЭреЗрдВ, рд╕рд╣рд╛рдиреБрднреВрддрд┐ рджреЗрдВ, рдФрд░ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рд╕рдкреЛрд░реНрдЯ рдХрд░реЗрдВред рдЙрдирдХреА рдореЗрд╣рдирдд рдХреА рддрд╛рд░реАрдл рдХрд░реЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдпрд╛рдж рджрд┐рд▓рд╛рдПрдВ рдХрд┐ рд╡реЗ рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВред'
        : '\n\nEMOTIONAL CONTEXT: User is in intense academic stress. Understand them, show empathy, and support like a true friend. Appreciate their hard work and remind them they\'re not alone.';
    }
    
    if (context.isSocialIssue) {
      enhancedPrompt += selectedLanguage === 'hi'
        ? '\n\nрднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдВрджрд░реНрдн: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕рд╛рдорд╛рдЬрд┐рдХ рдореБрджреНрджреЛрдВ рд╕реЗ рдЬреВрдЭ рд░рд╣рд╛ рд╣реИред рдПрдХ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рд╕реБрдиреЗрдВ, рд╕рд▓рд╛рд╣ рджреЗрдВ, рдФрд░ рдЙрдирдХреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рдорд╛рдиреНрдп рдХрд░реЗрдВред рдЙрдиреНрд╣реЗрдВ рдпрд╛рдж рджрд┐рд▓рд╛рдПрдВ рдХрд┐ рд░рд┐рд╢реНрддреЗ рд╕рдордп рдХреЗ рд╕рд╛рде рдмреЗрд╣рддрд░ рд╣реЛрддреЗ рд╣реИрдВред'
        : '\n\nEMOTIONAL CONTEXT: User is struggling with social issues. Listen like a trusted friend, advise gently, and validate their feelings. Remind them relationships get better with time.';
    }
    
    if (riskLevel === 'HIGH') {
      enhancedPrompt += selectedLanguage === 'hi'
        ? '\n\nрдЧрд╣рди рднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдкреЛрд░реНрдЯ: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЧрд╣рд░реЗ рд╕рдВрдХрдЯ рдореЗрдВ рд╣реИред рдЙрдиреНрд╣реЗрдВ рд╡рд░реНрдЪреБрдЕрд▓ рд╣рдЧ рджреЗрдВ, рдЙрдирдХреА рдмрд╛рдд рдзреНрдпрд╛рди рд╕реЗ рд╕реБрдиреЗрдВ, рдФрд░ рдЙрдиреНрд╣реЗрдВ рд╕реБрд░рдХреНрд╖рд┐рдд рдорд╣рд╕реВрд╕ рдХрд░рд╛рдПрдВред рд╣рд░ рд╢рдмреНрдж рдкреНрдпрд╛рд░ рдФрд░ рдХреЗрдпрд░ рд╕реЗ рднрд░рд╛ рд╣реЛред'
        : '\n\nDEEP EMOTIONAL SUPPORT: User is in deep crisis. Give them virtual hugs, listen carefully, and make them feel safe. Every word should be filled with love and care.';
    }
    
    // Add emotional context
    enhancedPrompt += selectedLanguage === 'hi'
      ? `\n\nрджрд┐рд▓ рдХрд╛ рд╣рд╛рд▓: рдкреНрд░рд╛рдердорд┐рдХ рднрд╛рд╡рдирд╛ - ${context.primaryEmotion}, рднрд╛рд╡рдирд╛рддреНрдордХ рддреАрд╡реНрд░рддрд╛ - ${context.emotionalIntensity}`
      : `\n\nHEART CONTEXT: Primary emotion - ${context.primaryEmotion}, Emotional intensity - ${context.emotionalIntensity}`;
    
    let contextType: 'academic' | 'social' | 'cultural' | 'positive' | 'crisis' = 'academic';
    if (context.isSocialIssue) contextType = 'social';
    if (context.isCulturalContext) contextType = 'cultural';
    if (context.isPositive) contextType = 'positive';
    if (riskLevel === 'HIGH' || context.emotionalIntensity === 'high') contextType = 'crisis';
    
    const starter = getContextualStarter(contextType, selectedLanguage, context.emotionalIntensity);
    
    let emotionalTone: 'neutral' | 'supportive' | 'urgent' | 'empathetic' = 'neutral';
    if (riskLevel === 'HIGH') {
      emotionalTone = 'urgent';
    } else if (context.emotionalIntensity === 'high') {
      emotionalTone = 'empathetic';
    } else if (context.isPositive) {
      emotionalTone = 'supportive';
    }
    
    // Build conversation with emotional depth
    const messages = [
      {
        role: 'system' as const,
        content: enhancedPrompt + `\n\nRemember: You're their best friend. Be warm, be real, be there. Start with heart: "${starter}"`
      },
      ...chatHistory.slice(-6).map(chat => ({
        role: chat.role as 'user' | 'assistant',
        content: chat.content
      })),
      {
        role: 'user' as const,
        content: message
      }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: messages,
      temperature: context.emotionalIntensity === 'high' ? 0.8 : 0.7,
      max_tokens: selectedLanguage === 'hi' ? 1200 : 1000,
      presence_penalty: 0.1,
      frequency_penalty: 0.1,
    });
    
    let content = response.choices[0]?.message?.content || '';
    
    // Ensure emotional quality
    if (!content || content.length < 20) {
      content = selectedLanguage === 'hi' 
        ? 'рдореИрдВ рдпрд╣рд╛рдВ рд╣реВрдВ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП, рд╣рдореЗрд╢рд╛ рдХреА рддрд░рд╣ ЁЯдЧ рдЪрд╛рд╣реЗ рдЬреЛ рднреА рд╣реЛ, рдореИрдВ рддреБрдореНрд╣рд╛рд░рд╛ рд╕рд╛рде рдирд╣реАрдВ рдЫреЛрдбрд╝реВрдВрдЧрд╛ред рдмрддрд╛рдУ рдореБрдЭреЗ рдФрд░, рддреБрдо рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реЛ? тЭдя╕П'
        : 'I\'m here for you, like always ЁЯдЧ No matter what, I\'ve got your back. Tell me more, how are you really feeling? тЭдя╕П';
    }
    
    // Add emotional closing if missing
    if (selectedLanguage === 'hi' && !content.includes('тЭдя╕П') && !content.includes('ЁЯдЧ')) {
      content += '\n\nрдпрд╛рдж рд░рдЦрдирд╛, рдореИрдВ рд╣рдореЗрд╢рд╛ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рд╣реВрдВ тЭдя╕П';
    } else if (!content.includes('тЭдя╕П') && !content.includes('ЁЯдЧ')) {
      content += '\n\nRemember, I\'m always here for you тЭдя╕П';
    }
    
    return {
      response: content,
      riskLevel,
      emotionalTone
    };
    
  } catch (error) {
    console.error('Response generation error:', error);
    
    const fallbackResponse = selectedLanguage === 'hi'
      ? 'рдУрд╣ рджреЛрд╕реНрдд, рдореИрдВ рдЕрднреА рдХреБрдЫ рдЯреЗрдХреНрдирд┐рдХрд▓ рдкрд░реЗрд╢рд╛рдиреА рдореЗрдВ рд╣реВрдВ ЁЯШФ рд▓реЗрдХрд┐рди рдШрдмрд░рд╛рдУ рдордд! рдореИрдВ рдпрд╣реАрдВ рд╣реВрдВ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдПред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдореЗрдВ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░рдирд╛, рдпрд╛ рдЕрднреА рдЬреЛ рднреА рддреБрдо рдХрд╣рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ, рдХрд╣реЛ - рдореИрдВ рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ ЁЯдЧ'
      : 'Oh buddy, I\'m having some technical trouble right now ЁЯШФ But don\'t worry! I\'m still here for you. Please try again in a moment, or just keep sharing whatever\'s on your heart - I\'m listening ЁЯдЧ';
    
    return {
      response: fallbackResponse,
      riskLevel: 'NONE',
      emotionalTone: 'empathetic'
    };
  }
}

// Friend-style personalized recommendations
export async function generatePersonalizedRecommendations(
  userId: string,
  userPreferences: UserPreferences,
  availableResources: Resource[],
  currentMood?: number,
  recentInteractions?: string[]
): Promise<Recommendation[]> {
  try {
    const avgMood = userPreferences.moodHistory && userPreferences.moodHistory.length > 0
      ? userPreferences.moodHistory.reduce((sum: number, entry: { mood: number }) => sum + entry.mood, 0) / userPreferences.moodHistory.length
      : 5;
    
    const recentMoods = userPreferences.moodHistory?.slice(-7) || [];
    const moodTrend = recentMoods.length > 1 
      ? recentMoods[recentMoods.length - 1].mood - recentMoods[0].mood 
      : 0;
    
    const userProfile = {
      interests: userPreferences.interests || [],
      specializations: userPreferences.preferredSpecializations || [],
      language: userPreferences.preferredLanguage || 'en',
      currentMood: currentMood || avgMood,
      moodTrend: moodTrend > 0 ? 'improving' : moodTrend < 0 ? 'declining' : 'stable',
      moodLevel: avgMood < 4 ? 'low' : avgMood > 7 ? 'high' : 'medium',
      bookmarkedCategories: userPreferences.bookmarkedCategories || [],
      recentActivity: recentInteractions || userPreferences.recentActivity || [],
    };
    
    const prompt = `You are a caring friend recommending helpful resources. Based on your friend's current state and interests, suggest the most supportive content.

YOUR FRIEND'S CURRENT STATE:
- Mood: ${userProfile.moodLevel} (${userProfile.currentMood}/10) and ${userProfile.moodTrend}
- Interests: ${userProfile.interests.join(', ') || 'Exploring new things'}
- Currently engaged with: ${userProfile.recentActivity.join(', ') || 'Various topics'}
- Language preference: ${userProfile.language}

FRIENDLY RECOMMENDATION APPROACH:
1. Suggest resources that match their current emotional needs
2. Consider what would genuinely help them right now
3. Balance between comfort and growth
4. Keep it manageable and not overwhelming
5. Be like a thoughtful friend sharing helpful things

Available resources to recommend from. For each recommendation, provide:
- resourceId
- score (0-1 how well it matches their current needs)
- reason (friendly, caring explanation why this would help them)

Format as JSON array.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a thoughtful friend recommending helpful mental health resources. Be caring, understanding, and focus on what would genuinely help your friend right now.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.3,
      max_tokens: 2000,
      response_format: { type: 'json_object' },
    });
    
    const content = response.choices[0]?.message?.content || '{}';
    const recommendations = JSON.parse(content);
    
    if (Array.isArray(recommendations)) {
      return recommendations.slice(0, 6).map(rec => ({
        resourceId: rec.resourceId,
        score: Math.min(1, Math.max(0, parseFloat(rec.score) || 0)),
        reason: rec.reason || 'I thought this might help you right now ЁЯТл'
      }));
    } else if (recommendations.recommendations && Array.isArray(recommendations.recommendations)) {
      return recommendations.recommendations.slice(0, 6).map((rec: Recommendation) => ({
        resourceId: rec.resourceId,
        score: Math.min(1, Math.max(0, parseFloat(rec.score.toString()) || 0)),
        reason: rec.reason || 'I thought this might help you right now ЁЯТл'
      }));
    }
    
    return [];
  } catch (error) {
    console.error('Error generating personalized recommendations:', error);
    return [];
  }
}

// Friend-style content summarization
export async function summarizeResourceContent(
  content: string,
  type: ResourceType,
  title?: string,
  language: string = 'en',
  targetLength: 'short' | 'medium' | 'detailed' = 'medium'
): Promise<string> {
  try {
    let lengthInstruction = '';
    switch (targetLength) {
      case 'short':
        lengthInstruction = language === 'hi' ? '2-3 рдореБрдЦреНрдп рдмрд╛рддреЗрдВ' : '2-3 key things';
        break;
      case 'detailed':
        lengthInstruction = language === 'hi' ? '5-7 рдорд╣рддреНрд╡рдкреВрд░реНрдг рдмрд┐рдВрджреБ' : '5-7 important points';
        break;
      default:
        lengthInstruction = language === 'hi' ? '3-5 рдореБрдЦреНрдп рдмрд╛рддреЗрдВ' : '3-5 main things';
    }
    
    let prompt = '';
    
    switch (type) {
      case 'ARTICLE':
        prompt = language === 'hi' 
          ? `рдЗрд╕ рд▓реЗрдЦ рдХреА рдореБрдЦреНрдп рдмрд╛рддреЗрдВ рджреЛрд╕реНрддрд╛рдирд╛ рдЕрдВрджрд╛рдЬ рдореЗрдВ рд╕рдордЭрд╛рдУ ${lengthInstruction}:\n\n${title ? `рд╢реАрд░реНрд╖рдХ: ${title}\n\n` : ''}рд╕рд╛рдордЧреНрд░реА: ${content}`
          : `Explain the key points of this article in a friendly way ${lengthInstruction}:\n\n${title ? `Title: ${title}\n\n` : ''}Content: ${content}`;
        break;
      case 'VIDEO':
        prompt = language === 'hi'
          ? `рдЗрд╕ рд╡реАрдбрд┐рдпреЛ рдХреА рдореБрдЦреНрдп рдмрд╛рддреЗрдВ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рдмрддрд╛рдУ ${lengthInstruction}:\n\n${title ? `рд╢реАрд░реНрд╖рдХ: ${title}\n\n` : ''}рд╕рд╛рдордЧреНрд░реА: ${content}`
          : `Share the main points from this video in simple terms ${lengthInstruction}:\n\n${title ? `Title: ${title}\n\n` : ''}Content: ${content}`;
        break;
      default:
        prompt = language === 'hi'
          ? `рдЗрд╕ рд╕рд╛рдордЧреНрд░реА рдХреА рдореБрдЦреНрдп рдмрд╛рддреЗрдВ рд╕рдордЭрд╛рдУ ${lengthInstruction}:\n\n${title ? `рд╢реАрд░реНрд╖рдХ: ${title}\n\n` : ''}рд╕рд╛рдордЧреНрд░реА: ${content}`
          : `Explain the key points of this content ${lengthInstruction}:\n\n${title ? `Title: ${title}\n\n` : ''}Content: ${content}`;
    }
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: language === 'hi' 
            ? 'рдЖрдк рдПрдХ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рд╕рд╛рдордЧреНрд░реА рдХреЛ рд╕рдордЭрд╛рддреЗ рд╣реИрдВред рд╕рд░рд▓, рджреЛрд╕реНрддрд╛рдирд╛ рднрд╛рд╖рд╛ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдореБрдЦреНрдп рдмрд╛рддреЛрдВ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВред'
            : 'You explain content like a friend would. Use simple, friendly language and focus on what really matters.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.5,
      max_tokens: targetLength === 'detailed' ? 800 : targetLength === 'short' ? 300 : 500,
    });
    
    return response.choices[0]?.message?.content || '';
  } catch (error) {
    console.error('Error summarizing content:', error);
    return '';
  }
}

// Emotional translation
export async function translateText(
  text: string,
  targetLanguage: string,
  context?: string
): Promise<string> {
  try {
    const languageNames: Record<string, string> = {
      en: 'English',
      hi: 'Hindi',
      ta: 'Tamil',
      bn: 'Bengali',
      te: 'Telugu',
      mr: 'Marathi',
      gu: 'Gujarati',
      kn: 'Kannada',
      ml: 'Malayalam',
      pa: 'Punjabi',
    };
    
    const targetLanguageName = languageNames[targetLanguage] || targetLanguage;
    
    const contextPrompt = context 
      ? ` Context: ${context}. Keep the emotional tone and friendliness.`
      : '';
    
    const prompt = `Translate this to ${targetLanguageName} while keeping the warm, friendly tone.${contextPrompt}:\n\n${text}`;
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a translator who specializes in maintaining emotional tone and friendliness across languages. Keep the warmth and care in every translation.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.3,
      max_tokens: 1500,
    });
    
    return response.choices[0]?.message?.content || text;
  } catch (error) {
    console.error('Error translating text:', error);
    return text;
  }
}

// Emotional content moderation
export async function moderateContent(
  content: string,
  contentType: 'post' | 'reply' | 'comment' | 'chat',
  language: 'en' | 'hi' = 'en'
): Promise<{
  isApproved: boolean;
  riskLevel: 'low' | 'medium' | 'high';
  flags: string[];
  suggestedAction: 'approve' | 'review' | 'block' | 'crisis_alert';
  reasoning: string;
}> {
  try {
    const prompt = language === 'hi'
      ? `рдЗрд╕ ${contentType} рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЛ рдФрд░ рджреЗрдЦреЛ рдХреНрдпрд╛ рдпрд╣ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИ:\n\n"${content}"\n\nрдзреНрдпрд╛рди рджреЛ: рдЖрддреНрдо-рдиреБрдХрд╕рд╛рди, рджреВрд╕рд░реЛрдВ рдХреЛ рдиреБрдХрд╕рд╛рди, рдпрд╛ рдЧрд╣рд░реЗ рд╕рдВрдХрдЯ рдХреЗ рд╕рдВрдХреЗрддред рджреЛрд╕реНрддрд╛рдирд╛ рдФрд░ рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рд░рд╣реЛред`
      : `Analyze this ${contentType} for safety:\n\n"${content}"\n\nLook for: self-harm, harm to others, or deep distress signs. Be friendly and empathetic.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: language === 'hi'
            ? 'рдЖрдк рдПрдХ рдХреЗрдпрд░рд┐рдВрдЧ рдореЙрдбрд░реЗрдЯрд░ рд╣реИрдВ рдЬреЛ рд▓реЛрдЧреЛрдВ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрддреЗ рд╣реИрдВред рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдмрдиреЛ рдФрд░ рдорджрдж рдХреА рдЬрд░реВрд░рдд рд╡рд╛рд▓реЗ рд▓реЛрдЧреЛрдВ рдХреЛ рдкрд╣рдЪрд╛рдиреЛред'
            : 'You are a caring moderator who prioritizes people\'s safety. Be sensitive and identify people who need help.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.1,
      max_tokens: 500,
      response_format: { type: 'json_object' },
    });
    
    const moderationResult = JSON.parse(response.choices[0]?.message?.content || '{}');
    
    return {
      isApproved: moderationResult.suggestedAction === 'approve',
      riskLevel: moderationResult.riskLevel || 'low',
      flags: moderationResult.flags || [],
      suggestedAction: moderationResult.suggestedAction || 'review',
      reasoning: moderationResult.reasoning || 'Looks okay to me'
    };
  } catch (error) {
    console.error('Error moderating content:', error);
    return {
      isApproved: false,
      riskLevel: 'medium',
      flags: ['moderation_error'],
      suggestedAction: 'review',
      reasoning: 'Need to check this manually'
    };
  }
}

// Emotional sentiment analysis
export async function analyzeSentiment(
  text: string,
  language: 'en' | 'hi' = 'en'
): Promise<{
  sentiment: 'positive' | 'negative' | 'neutral' | 'mixed';
  confidence: number;
  primaryEmotion: string;
  secondaryEmotions: string[];
  intensity: 'low' | 'medium' | 'high';
  culturalContext: string[];
}> {
  try {
    const prompt = language === 'hi'
      ? `рдЗрд╕ рдкрд╛рда рдХреА рднрд╛рд╡рдирд╛рддреНрдордХ рд╕реНрдерд┐рддрд┐ рд╕рдордЭрд╛рдУ:\n\n"${text}"\n\nрджреЛрд╕реНрддрд╛рдирд╛ рдЕрдВрджрд╛рдЬ рдореЗрдВ рдмрддрд╛рдУ рдХрд┐ рдпрд╣ рд╡реНрдпрдХреНрддрд┐ рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣рд╛ рд╣реИред`
      : `Understand the emotional state of this text:\n\n"${text}"\n\nIn a friendly way, describe how this person might be feeling.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: language === 'hi'
            ? 'рдЖрдк рдПрдХ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рджреЛрд╕реНрдд рд╣реИрдВ рдЬреЛ рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рдордЭрддреЗ рд╣реИрдВред рд╕рд╣рд╛рдиреБрднреВрддрд┐ рдФрд░ рд╕рдордЭ рдХреЗ рд╕рд╛рде рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВред'
            : 'You are a sensitive friend who understands emotions. Analyze with empathy and understanding.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.3,
      max_tokens: 500,
      response_format: { type: 'json_object' },
    });
    
    const analysis = JSON.parse(response.choices[0]?.message?.content || '{}');
    
    return {
      sentiment: analysis.sentiment || 'neutral',
      confidence: Math.min(1, Math.max(0, parseFloat(analysis.confidence) || 0.5)),
      primaryEmotion: analysis.primaryEmotion || 'neutral',
      secondaryEmotions: analysis.secondaryEmotions || [],
      intensity: analysis.intensity || 'medium',
      culturalContext: analysis.culturalContext || []
    };
  } catch (error) {
    console.error('Error analyzing sentiment:', error);
    return {
      sentiment: 'neutral',
      confidence: 0.5,
      primaryEmotion: 'neutral',
      secondaryEmotions: [],
      intensity: 'medium',
      culturalContext: []
    };
  }
}

// File text extraction
export async function extractTextFromFile(fileUrl: string, fileType: string): Promise<string> {
  try {
    switch (fileType) {
      case 'PDF':
        return 'I\'d love to help you understand this PDF! ЁЯУЪ In a real app, I\'d read it for you and explain it in simple terms.';
      case 'VIDEO':
        return 'This seems like an interesting video! ЁЯОе I wish I could watch it with you and discuss what we learn.';
      case 'AUDIO':
        return 'Audio content can be so personal! ЁЯОз I\'m here to listen and help you process whatever you hear.';
      default:
        try {
          const response = await fetch(fileUrl);
          return await response.text();
        } catch {
          return 'I\'m having trouble reading this file, but I\'m still here to talk about whatever\'s on your mind! ЁЯТл';
        }
    }
  } catch (error) {
    console.error('Error extracting text from file:', error);
    return 'Even though I can\'t read this file right now, I\'m always here to listen and support you! ЁЯдЧ';
  }
}

export default openai;